{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","DemoCanvasWidget.tsx","components/custom-node-ts/TSCustomNodeModel.ts","components/custom-node-ts/TSCustomNodeWidget.tsx","components/custom-node-ts/TSCustomNodeFactory.tsx","components/BodyWidget.tsx","index.tsx"],"names":["S","styled","div","TrayWidget","Tray","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","className","name","background","css","DemoCanvasWidget","styles","Expand","Container","TSCustomNodeModel","options","type","port_selection","setupInOutPorts","console","log","addPort","DefaultPortModel","in","data","DefaultNodeModel","TSCustomNodeWidget","state","node","engine","port","getPort","style","visibility","backgroundColor","TSCustomNodeFactory","AbstractReactFactory","FullscreenCanvas","BodyWidget","diagramEngine","createEngine","lastNodeSelected","item_types","args","item_name","getNodeFactories","registerFactory","DiagramModel","deserializeModel","parse","registerListener","nodesUpdated","sendToStreamlit","bind","linksUpdated","_","getNodes","selectionChanged","selectionChangedListner","setModel","Streamlit","setFrameHeight","setState","entity","id","getModel","send_to_streamlit","serialize","setComponentValue","tray_items","tray_item_widgets_to_render","map","item","Body","Content","Layer","onDrop","getData","nodeColor","filter","i","nodePortSelections","point","getRelativeMousePoint","setPosition","addNode","forceUpdate","onDragOver","preventDefault","StreamlitComponentBase","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a011079.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tpadding: 10px;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: any;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-top: 4px;\n\t\tcursor: pointer;\n\t`;\n\t\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\t\nnamespace S {\n\t// export const Container = styled.div<{ color: string; background: string }>\n\t// `height: 100%;`\n\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\t// export const Expand = css``;\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { NodeModel, DefaultPortModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { BaseModelOptions } from '@projectstorm/react-canvas-core';\n\nexport interface TSCustomNodeModelOptions extends BaseModelOptions {\n\tcolor?: string;\n\tport_selection?: string;\n}\n\nexport class TSCustomNodeModel extends DefaultNodeModel {\n\tcolor: string;\n\ttype: string\n\tport_selection: string;\n\t// options: TSCustomNodeModelOptions\n\n\n\tconstructor(options: TSCustomNodeModelOptions = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t});\n\t\tthis.color = options.color || 'red';\n\t\tthis.type = options.type\n\t\tthis.port_selection = options.port_selection\n\t\tthis.setupInOutPorts()\n\t\t// setup an in and out port\n\t}\n\n\tsetupInOutPorts(){\n\t\t// if ([\"Sales\", \"Conversion\", \"Inventory\"].includes( this.type ))\n\t\tconsole.log('hererers');\n\t\tconsole.log(this.port_selection);\n\n\t\tif (this.port_selection == 'in' || this.port_selection == 'both')\n\t\t\t{\n\t\t\t\tthis.addPort(\n\t\t\t\t\tnew DefaultPortModel({\n\t\t\t\t\t\tin: true,\n\t\t\t\t\t\tname: 'in'\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.port_selection == 'out' || this.port_selection == 'both')\n\t\t// if ([\"Purchase\", \"Conversion\", \"Inventory\"].includes( this.type ))\n\t\t\t{\n\t\t\t\tthis.addPort(\n\t\t\t\t\tnew DefaultPortModel({\n\t\t\t\t\t\tin: false,\n\t\t\t\t\t\tname: 'out'\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tcolor: this.color,\n\t\t\ttype: this.type,\n\t\t\tport_selection: this.port_selection,\n\t\t};\n\t}\n\n\tdeserialize(event : any): void {\n\t\tsuper.deserialize(event);\n\t\tthis.color = event.data.color;\n\t\tthis.options.type = event.data.type;\n\t\tthis.type = event.data.type;\n\t\tthis.port_selection = event.data.port_selection;\n\t\t// this.options.port_selection = 'in';\n\n\t\t\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\n\nexport interface TSCustomNodeWidgetProps {\n\tnode: TSCustomNodeModel;\n\tengine: DiagramEngine;\n}\n\nexport interface TSCustomNodeWidgetState {}\n\nexport class TSCustomNodeWidget extends React.Component<TSCustomNodeWidgetProps, TSCustomNodeWidgetState> {\n\tconstructor(props: TSCustomNodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"custom-node\">\n\t\t\t\t\n\t\t\t\t{ \n\t\t\t\t// [\"Sales\", \"Conversion\", \"Inventory\"].includes( this.props.node.type )\n\t\t\t\tthis.props.node.port_selection == 'in' || this.props.node.port_selection == 'both'\n\t\t\t\t?\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('in')}>\n\t\t\t\t\t\t<div className=\"circle-port\" />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t: <div className=\"circle-port\" style={{ visibility: \"hidden\" }} />\n\t\t\t}\n\n\t\t\t\t{ \n\t\t\t\t// [\"Purchase\", \"Conversion\", \"Inventory\"].includes( this.props.node.type ) \n\t\t\t\tthis.props.node.port_selection == 'out' || this.props.node.port_selection == 'both'\n\t\t\t\t?\n\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('out')}>\n\t\t\t\t\t\t<div className=\"circle-port\" />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t: <div className=\"circle-port\" style={{ visibility: \"hidden\" }} />\n\t\t\t\t}\n\n\t\t\t\t<div className=\"custom-node-color\" style={{ backgroundColor: this.props.node.color }} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\nimport { TSCustomNodeWidget } from './TSCustomNodeWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\ninterface TSCustomNodeFactoryTypes extends AbstractReactFactory<TSCustomNodeModel, DiagramEngine> {\n }\n\nexport class TSCustomNodeFactory extends AbstractReactFactory<TSCustomNodeModel, DiagramEngine> implements TSCustomNodeFactoryTypes {\n\tconstructor(props:any) {\n\t\tsuper(props.type);\n\t}\n\t\n\n\tgenerateModel() {\n\t\treturn new TSCustomNodeModel();\n\t}\n\n\tgenerateReactWidget(event :any): JSX.Element {\n\t\treturn <TSCustomNodeWidget engine={this.engine as DiagramEngine} node={event.model} />;\n\t}\n}\n\n\n","import * as React from 'react';\nimport { TrayWidget } from './TrayWidget';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport createEngine, { DefaultPortFactory, DiagramModel, DefaultLinkFactory } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../DemoCanvasWidget';\nimport { TSCustomNodeFactory } from './custom-node-ts/TSCustomNodeFactory';\nimport { TSCustomNodeModel } from './custom-node-ts/TSCustomNodeModel';\nimport * as _ from 'lodash';\nimport {\n\tStreamlit,\n\tStreamlitComponentBase,\n\twithStreamlitConnection,\n  } from \"streamlit-component-lib\"\n\nimport styled from '@emotion/styled';\n\nconst FullscreenCanvas = styled(DemoCanvasWidget)`\n  height: 100%;\n  width: 100%;\n`;\nconst Container = styled.div`\n  height: 800px;\n  width: 100vw;\n`;\n\nexport interface BodyWidgetProps {\n}\n\ninterface BodyWidgetState {\n\tdiagramEngine: any;\n\tlastNodeSelected: string | null\n  }\n\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Content = styled.div`\n\t\theight: 100px;\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\n\nclass BodyWidget extends StreamlitComponentBase<BodyWidgetState> {\n\n\tpublic constructor(props : any) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdiagramEngine: createEngine(),\n\t\t\tlastNodeSelected: null\n\t\t\t}\n\n\t\t// Regiter factories\n\t\tvar item_types = this.props.args['item_types'];\n\t\tconsole.log(item_types);\n\t\tfor (const item of item_types) {\n\t\t\tvar item_name = item['title']\n\t\t\tthis.state.diagramEngine.getNodeFactories().registerFactory(new TSCustomNodeFactory({'type': item_name}) as any);\n\t\t  }\n\t\t  \n\n\n\t\tvar model =  new DiagramModel()\n\t\tif (props.args['model']){\n\t\t\tmodel.deserializeModel(JSON.parse(props.args['model']), this.state.diagramEngine);\n\t\t}\n\n\t\tmodel.registerListener({\n\t\t\tnodesUpdated: this.sendToStreamlit.bind(this), \n\t\t\tlinksUpdated: this.sendToStreamlit.bind(this),\n\t\t})\n\n\t\t_.forEach(model.getNodes(), (node) => {\n\t\t\tnode.registerListener({\n\t\t\t\tselectionChanged: this.selectionChangedListner.bind(this)\n\t\t\t})\n\t\t\t});\n\t\t\n\n\t\tthis.state.diagramEngine.setModel(model)\n\n\t}\n\n\tcomponentDidMount(){\n\t\tStreamlit.setFrameHeight()\n\t}\n\t\n\tselectionChangedListner(event : any) : void {\n\t\tthis.setState({ \n\t\t\tlastNodeSelected: event.entity.options.id \n\t\t\t}, this.sendToStreamlit)\n\t}\n\t\t\n\tsendToStreamlit() : void {\n\t\tvar model = this.state.diagramEngine.getModel()\n\t\tvar send_to_streamlit = JSON.stringify(\n\t\t\t{\"model\" : model.serialize(), 'lastNodeSelected':this.state.lastNodeSelected}\n\t\t\t);\n\t\tStreamlit.setComponentValue(send_to_streamlit);\n\t}\n\n\trender() {\n\t\tvar tray_items = this.props.args['item_types']\n\t\t const tray_item_widgets_to_render = tray_items.map((item:any) => (\n\t\t\t\t<TrayItemWidget model={{ type: item['title'] }} name={item['title']} color={item['color']}/>\n\t\t\t  ))\n\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Content>\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t{tray_item_widgets_to_render}\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar nodeColor = tray_items.filter((i:any) => i['title']==data['type'])[0]['color']\n\t\t\t\t\t\t\tvar nodePortSelections = tray_items.filter((i:any) => i['title']==data['type'])[0]['port_selection']\n\t\t\t\t\t\t\tvar node: TSCustomNodeModel = new TSCustomNodeModel({ color: nodeColor , type: data.type, port_selection: nodePortSelections});\n\t\t\t\t\n\t\t\t\t\t\t\tvar point = this.state.diagramEngine.getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tnode.registerListener({\n\t\t\t\t\t\t\t\tselectionChanged: this.selectionChangedListner.bind(this)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.state.diagramEngine.getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t<FullscreenCanvas>\n\t\t\t\t\t\t\t<CanvasWidget engine={this.state.diagramEngine} />\n\t\t\t\t\t\t</FullscreenCanvas>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</S.Layer>\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t);\n\t}\n}\n\nexport default withStreamlitConnection(BodyWidget);","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport BodyWidget from './components/BodyWidget';\nimport \"./index.css\";\nimport {\n\tStreamlit,\n\tStreamlitComponentBase,\n\twithStreamlitConnection,\n  } from \"streamlit-component-lib\"\n\nReactDOM.render(\n    <React.StrictMode>\n        {/* <div style={{ width: \"1000px\", height: \"1000px\", color: \"red\"}}>Hi</div> */}\n        <BodyWidget />\n    </React.StrictMode>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}