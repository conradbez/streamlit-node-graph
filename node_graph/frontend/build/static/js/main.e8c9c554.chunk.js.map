{"version":3,"sources":["components/TrayWidget.tsx","components/TrayItemWidget.tsx","DemoCanvasWidget.tsx","components/custom-node-ts/TSCustomNodeModel.ts","components/custom-node-ts/TSCustomNodeWidget.tsx","components/custom-node-ts/TSCustomNodeFactory.tsx","components/BodyWidget.tsx","index.tsx"],"names":["S","styled","div","TrayWidget","Tray","this","props","children","React","p","color","TrayItemWidget","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","className","name","background","css","DemoCanvasWidget","styles","Expand","Container","TSCustomNodeModel","options","type","console","log","includes","addPort","DefaultPortModel","in","data","NodeModel","TSCustomNodeWidget","state","node","engine","port","getPort","style","visibility","backgroundColor","TSCustomNodeFactory","initialConfig","AbstractReactFactory","FullscreenCanvas","BodyWidget","diagramEngine","createEngine","lastNodeSelected","getNodeFactories","registerFactory","DiagramModel","registerListener","nodesUpdated","sendToStreamlit","bind","linksUpdated","setModel","getModel","setState","entity","id","send_to_streamlit","serialize","Streamlit","setComponentValue","Body","Content","Layer","onDrop","parse","getData","point","getRelativeMousePoint","setPosition","selectionChanged","selectionChangedListner","addNode","forceUpdate","onDragOver","preventDefault","StreamlitComponentBase","withStreamlitConnection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8c9c554.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tpadding: 10px;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: any;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-top: 4px;\n\t\tcursor: pointer;\n\t`;\n\t\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { NodeModel, DefaultPortModel } from '@projectstorm/react-diagrams';\nimport { BaseModelOptions } from '@projectstorm/react-canvas-core';\n\nexport interface TSCustomNodeModelOptions extends BaseModelOptions {\n\tcolor?: string;\n}\n\nexport class TSCustomNodeModel extends NodeModel {\n\tcolor: string;\n\ttype: string\n\n\tconstructor(options: TSCustomNodeModelOptions = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t});\n\t\tthis.color = options.color || 'red';\n\t\tthis.type = options.type\n\t\t// setup an in and out port\n\t\tconsole.log('here')\n\t\tconsole.log(this.options.type)\n\t\tif ([\"Sales\", \"Conversion\", \"Inventory\"].includes( this.options.type ))\n\t\t\t{\n\t\t\t\tthis.addPort(\n\t\t\t\t\tnew DefaultPortModel({\n\t\t\t\t\t\tin: true,\n\t\t\t\t\t\tname: 'in'\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\tif ([\"Purchase\", \"Conversion\", \"Inventory\"].includes( this.options.type ))\n\t\t\t{\n\t\t\t\tthis.addPort(\n\t\t\t\t\tnew DefaultPortModel({\n\t\t\t\t\t\tin: false,\n\t\t\t\t\t\tname: 'out'\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tcolor: this.color,\n\t\t\ttype: this.type,\n\t\t};\n\t}\n\n\tdeserialize(event : any): void {\n\t\tsuper.deserialize(event);\n\t\tthis.color = event.data.color;\n\t\tthis.type = event.type;\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\n\nexport interface TSCustomNodeWidgetProps {\n\tnode: TSCustomNodeModel;\n\tengine: DiagramEngine;\n}\n\nexport interface TSCustomNodeWidgetState {}\n\nexport class TSCustomNodeWidget extends React.Component<TSCustomNodeWidgetProps, TSCustomNodeWidgetState> {\n\tconstructor(props: TSCustomNodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"custom-node\">\n\t\t\t\t{ [\"Sales\", \"Conversion\", \"Inventory\"].includes( this.props.node.type )\n\t\t\t\t?\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('in')}>\n\t\t\t\t\t\t<div className=\"circle-port\" />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t: <div className=\"circle-port\" style={{ visibility: \"hidden\" }} />\n\t\t\t}\n\n\t\t\t\t{ [\"Purchase\", \"Conversion\", \"Inventory\"].includes( this.props.node.type ) \n\t\t\t\t?\n\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('out')}>\n\t\t\t\t\t\t<div className=\"circle-port\" />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t: <div className=\"circle-port\" style={{ visibility: \"hidden\" }} />\n\t\t\t\t}\n\n\t\t\t\t<div className=\"custom-node-color\" style={{ backgroundColor: this.props.node.color }} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\nimport { TSCustomNodeWidget } from './TSCustomNodeWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class TSCustomNodeFactory extends AbstractReactFactory<TSCustomNodeModel, DiagramEngine> {\n\tconstructor(props:any) {\n\t\tsuper(props.type);\n\t}\n\n\tgenerateModel(initialConfig: any) {\n\t\treturn new TSCustomNodeModel();\n\t}\n\n\tgenerateReactWidget(event :any): JSX.Element {\n\t\treturn <TSCustomNodeWidget engine={this.engine as DiagramEngine} node={event.model} />;\n\t}\n}\n\n\n","import * as React from 'react';\nimport { TrayWidget } from './TrayWidget';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../DemoCanvasWidget';\nimport { TSCustomNodeFactory } from './custom-node-ts/TSCustomNodeFactory';\nimport { TSCustomNodeModel } from './custom-node-ts/TSCustomNodeModel';\n// import * as _ from 'lodash';\nimport {\n\tStreamlit,\n\tStreamlitComponentBase,\n\twithStreamlitConnection,\n  } from \"streamlit-component-lib\"\n\nimport styled from '@emotion/styled';\n\nconst FullscreenCanvas = styled(DemoCanvasWidget)`\n  height: 100%;\n  width: 100%;\n`;\nconst Container = styled.div`\n  height: 800px;\n  width: 100vw;\n`;\n\nexport interface BodyWidgetProps {\n}\n\ninterface BodyWidgetState {\n\tdiagramEngine: any;\n\tlastNodeSelected: string | null\n  }\n\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Content = styled.div`\n\t\theight: 100px;\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\n\nclass BodyWidget extends StreamlitComponentBase<BodyWidgetState> {\n\n\tpublic constructor(props : any) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdiagramEngine: createEngine(),\n\t\t\tlastNodeSelected: null\n\t\t\t}\n\t\tthis.state.diagramEngine.getNodeFactories().registerFactory(new TSCustomNodeFactory({'type': 'Purchase'}) as any);\n\t\tthis.state.diagramEngine.getNodeFactories().registerFactory(new TSCustomNodeFactory({'type': 'Inventory'}) as any);\n\t\tthis.state.diagramEngine.getNodeFactories().registerFactory(new TSCustomNodeFactory({'type': 'Sales'}) as any);\n\t\tthis.state.diagramEngine.getNodeFactories().registerFactory(new TSCustomNodeFactory({'type': 'Conversion'}) as any);\n\n\t\tvar model =  new DiagramModel()\n\t\tmodel.registerListener({\n\t\t\tnodesUpdated: this.sendToStreamlit.bind(this), \n\t\t\tlinksUpdated: this.sendToStreamlit.bind(this),\n\t\t})\n\t\tthis.state.diagramEngine.setModel(model)\n\t\tthis.state.diagramEngine.getModel()\n\t}\n\n\tcomponentDidMount(){\n\n\t}\n\t\n\tselectionChangedListner(event : any) : void {\n\t\tthis.setState({ \n\t\t\tlastNodeSelected: event.entity.options.id \n\t\t\t}, this.sendToStreamlit)\n\t}\n\t\t\n\tsendToStreamlit() : void {\n\t\tvar model = this.state.diagramEngine.getModel()\n\t\tvar send_to_streamlit = JSON.stringify(\n\t\t\t{\"model\" : model.serialize(), 'lastNodeSelected':this.state.lastNodeSelected}\n\t\t\t);\n\t\tconsole.log(\"getting ready to send to streamlit\")\n\t\tStreamlit.setComponentValue(send_to_streamlit);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Content>\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'Purchase' }} name=\"Purchase\" color=\"rgb(192,0,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'Inventory' }} name=\"Inventory\" color=\"rgb(192,255,0)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'Conversion' }} name=\"Conversion\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'Sales' }} name=\"Sales\" color=\"rgb(255,192,0)\" />\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\t// var nodesCount = _.keys(this.state.diagramEngine.getModel().getNodes()).length;\n\t\t\t\t\t\t\tvar node: TSCustomNodeModel;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (data.type === 'Purchase') {\n\t\t\t\t\t\t\t\tnode = new TSCustomNodeModel({ color: 'rgb(192,0,255)' , type: data.type });\n\t\t\t\t\t\t\t}if (data.type === 'Inventory') {\n\t\t\t\t\t\t\t\tnode = new TSCustomNodeModel({ color: 'rgb(192,255, 0)' , type: data.type  });\n\t\t\t\t\t\t\t}if (data.type === 'Conversion') {\n\t\t\t\t\t\t\t\tnode = new TSCustomNodeModel({ color: 'rgb(0,192,255)' , type: data.type  });\n\t\t\t\t\t\t\t}if (data.type === 'Sales') {\n\t\t\t\t\t\t\t\tnode = new TSCustomNodeModel({ color: 'rgb(255,192,0)' , type: data.type  });\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.state.diagramEngine.getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tnode.registerListener({\n\t\t\t\t\t\t\t\tselectionChanged: this.selectionChangedListner.bind(this)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tthis.state.diagramEngine.getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t<FullscreenCanvas>\n\t\t\t\t\t\t\t<CanvasWidget engine={this.state.diagramEngine} />\n\t\t\t\t\t\t</FullscreenCanvas>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</S.Layer>\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t);\n\t}\n}\n\nexport default withStreamlitConnection(BodyWidget);\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport BodyWidget from './components/BodyWidget';\nimport \"./index.css\";\n// Tells React to render the App component on the DOM element whose id is \"root\"\n// You never did that, and thats why there's no child on the \"root\" div on the DevTools\nReactDOM.render(<BodyWidget />, document.getElementById('root'));"],"sourceRoot":""}